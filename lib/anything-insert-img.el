(defun image-dir (pwd)
  (interactive "DRoot Dir: ")
  (setq path-img (format "%simg" pwd))
  (setq path-images (format "%simages" pwd))
  (setq path-static (format "%sstatic/img" pwd))
  (setq path-public (format "%spublic/img" pwd))
  (setq path-public-common (format "%spublic/common/img" pwd))
  (setq path-assets-img (format "%spublic/assets/img" pwd))
  (cond
   ((not pwd) nil)
   ((string= pwd "/") nil)
   ((file-exists-p path-img) path-img)
   ((file-exists-p path-assets-img) path-assets-img)
   ((file-exists-p path-images) path-images)
   ((file-exists-p path-static) path-static)
   ((file-exists-p path-public-common) path-public-common)
   ((file-exists-p path-public) path-public)
   (t (image-dir (file-name-directory (directory-file-name pwd))))))

(defun current-project-image-path ()
  (setq pwd (shell-command-to-string "echo -n `pwd`"))
  (image-dir pwd))

(defun current-project-images ()
  (setq target (current-project-image-path))
  (if target (split-string (shell-command-to-string (format "find %s" target))) nil))

(defun image-dimention (img-name)
  (setq pwd (shell-command-to-string "echo -n `pwd`"))
  (setq cmd (format "identify %s | cut -d ' ' -f 3" img-name))
  (setq res (shell-command-to-string cmd))
  (setq res (car (last (split-string res))))
  (split-string res "x"))

(defun anything-c-sources-current-project-img ()
  (setq format-img-tag "<img width=\"%s\" height=\"%s\" src=\"<%%= img_path %%>/%s\" alt=\"\"/>")
  (setq format-css-img "width: %spx;\nheight: %spx;\nbackground-image: image-url(\"%s\");")
  (setq format-js-img "const IMAGE_WIDTH = %s;\nconst IMAGE_HEIGHT = %s;\nconst IMAGE_PATH = '%s';")
  (setq format-slim-img "img[width=\"%s\" height=\"%s\" src=\"%s\" alt=\"\"]")
  (setq format-md-img "![img](%s)")
  (setq format-detail "image path\t%s\nentry:\t%s\nabsolute:\t%s\nrelative:\t%s\nbasename:\t%s\nwidth:\t%s\nheight:\t%s")
  (setq images (current-project-images))
  (setq image-path (concat (current-project-image-path) "/"))
  '((name . "img")
    (candidates . images)
    (type . file)
    (action . (lambda (entry)
                (setq dimen (image-dimention entry))
                (setq width (nth 0 dimen))
                (setq height (nth 1 dimen))
                (setq absolute (expand-file-name entry))
                (setq relative (file-relative-name absolute default-directory))
                (setq basename (replace-regexp-in-string image-path "" absolute))
                (cond 
                 ((eq major-mode 'slim-mode)
                    (insert (format format-slim-img width height basename)))
                 ((eq major-mode 'css-mode)
                    (insert (format format-css-img width height basename)))
                 ((eq major-mode 'js2-mode)
                    (insert (format format-js-img width height basename)))
                 ((eq major-mode 'html-mode)
                  (insert (format format-img-tag width height basename)))
                 ((eq major-mode 'web-mode)
                  (insert (format format-img-tag width height basename)))
                 ((eq major-mode 'markdown-mode)
                  (insert (format format-md-img entry)))
                 (t (insert (format format-detail image-path entry absolute relative basename width height))))))))

(defun anything-insert-img ()
  (interactive)
  (anything 
   :sources (list (anything-c-sources-current-project-img))
   :default ""
   :prompt "Insert Img: "))
